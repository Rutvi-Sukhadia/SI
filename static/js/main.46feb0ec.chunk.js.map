{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","props","id","name","email","className","src","alt","CardList","cardArray","robots","map","robot","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","filteredRobobts","filter","toLowerCase","includes","length","fetch","then","response","json","users","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAiBeA,EAfF,SAACC,GACV,IAAOC,EAAiBD,EAAjBC,GAAGC,EAAcF,EAAdE,KAAKC,EAASH,EAATG,MACf,OAEI,cADA,CACA,OAAKC,UAAU,qDAAf,UACI,qBAAKC,IAAG,+BAA0BJ,GAAMK,IAAI,UAC5C,gCACI,6BAAKJ,IACL,4BAAIC,WCILI,EAXE,SAAC,GAAc,IACtBC,EADqB,EAAZC,OACUC,KAAK,SAAAC,GAC1B,OAAO,cAAC,EAAD,CAAqBV,GAAIU,EAAMV,GAAIC,KAAMS,EAAMT,KAAMC,MAAOQ,EAAMR,OAAvDQ,EAAMV,OAE5B,OACI,8BACKO,KCEEI,EATG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKT,UAAU,MAAf,SACI,uBAAOA,UAAU,4CAA4CU,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,OCK9GI,EARA,SAACjB,GACZ,OACI,qBAAKkB,MAAO,CAAEC,UAAU,SAASC,OAAO,0BAA2BC,OAAO,QAA1E,SACKrB,EAAMsB,YCmBJC,E,kDArBX,WAAYvB,GAAO,IAAD,8BACd,cAAMA,IACDwB,MAAQ,CACTC,UAAU,GAHA,E,qDAOlB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,oBAG5B,WACI,OAAGG,KAAKJ,MAAMC,SACH,4DAGAG,KAAK5B,MAAMsB,a,GAjBFQ,aC+DbC,G,wDApDX,aAAc,IAAD,8BACT,gBAOJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAP1C,EAAKZ,MAAQ,CACTf,OAAQ,GACRyB,YAAY,IAJP,E,0CAYb,WACI,MAA6BN,KAAKJ,MAA3Bf,EAAP,EAAOA,OAAOyB,EAAd,EAAcA,YACRG,EAAkB5B,EAAO6B,QAAO,SAAA3B,GAClC,OAAOA,EAAMT,KAAKqC,cAAcC,SAASN,EAAYK,kBAEzD,OAAmB,IAAhB9B,EAAOgC,OAEF,sBAAKrC,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,0BACA,cAAC,EAAD,CAAWS,aAAce,KAAKI,iBAC9B,+CAOJ,sBAAK5B,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,0BACA,cAAC,EAAD,CAAWS,aAAce,KAAKI,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUvB,OAAQ4B,a,+BAU1C,WAAoB,IAAD,OACfK,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKjB,SAAS,CAACpB,OAAOqC,W,GAhD3BhB,cCAHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.46feb0ec.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    const {id,name,email} = props;\r\n    return (\r\n        //React uses JSX to create its virtual dom, within brackets we can write html tags or custom components (like <Hello />)\r\n        <div className='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}`} alt='Robot'/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    const cardArray = robots.map( robot => {\r\n        return <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email}/>\r\n    });\r\n    return (\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input className=\"pa3 ba b--black bg-lightest-blue shadow-5\" type='search' placeholder='Search Robots' onChange={searchChange}/>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY:'scroll',border:'1px solid rgb(8, 4, 44)', height:'74vh' }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError:true});\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h3>Oops Something went wrong!</h3> ;\r\n        }\r\n        else{\r\n            return this.props.children;\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React,{Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport Searchbox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\n\r\n//Props are just input or properties, we never modify them and use pure components/functions like cCard or CardList\r\n//State - object that describes app, and here state is robots and whatever is entered in the search box => its able to change\r\n//Parent feeds state into child component\r\n//for using state we use class instead of functions, these are called smart components \r\nclass App extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {  //adding state and what we need the state to describe\r\n            robots: [],\r\n            searchfield:''\r\n        }\r\n    }\r\n\r\n    onSearchChange = (event) => {   //Always use arrow functions while creating own methods, this makes sure that 'this' refers to App's object\r\n        this.setState({ searchfield: event.target.value });\r\n    }\r\n\r\n    render(){\r\n        const {robots,searchfield} = this.state;\r\n        const filteredRobobts = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n        if(robots.length===0){\r\n            return (\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f1\">Robo-Friends</h1>\r\n                    <Searchbox searchChange={this.onSearchChange}/>\r\n                    <h3>Loading...</h3>\r\n                </div>\r\n                \r\n            );\r\n        }\r\n        else{\r\n            return (\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f1\">Robo-Friends</h1>\r\n                    <Searchbox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobobts} />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n                \r\n            );\r\n        }\r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({robots:users}));\r\n    }\r\n    \r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';  //by default considers app.js if type not sprcified\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n   <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}