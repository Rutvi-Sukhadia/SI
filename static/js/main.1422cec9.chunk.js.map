{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","constants.js","containers/App.js","actions.js","reducers.js","reportWebVitals.js","index.js"],"names":["Card","props","id","name","email","className","src","alt","CardList","cardArray","robots","map","robot","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","isPending","searchField","onSearchChange","filteredRobobts","filter","toLowerCase","includes","onRequestRobots","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","users","catch","initialStateForSearchRobots","initialStateForRequestRobots","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1422cec9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    const {id,name,email} = props;\r\n    return (\r\n        //React uses JSX to create its virtual dom, within brackets we can write html tags or custom components (like <Hello />)\r\n        <div className='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}`} alt='Robot'/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    const cardArray = robots.map( robot => {\r\n        return <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email}/>\r\n    });\r\n    return (\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input className=\"pa3 ba b--black bg-lightest-blue shadow-5\" type='search' placeholder='Search Robots' onChange={searchChange}/>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY:'scroll',border:'1px solid rgb(8, 4, 44)', height:'74vh' }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError:true});\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h3>Oops Something went wrong!</h3> ;\r\n        }\r\n        else{\r\n            return this.props.children;\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import React,{Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport Searchbox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\nimport {setSearchField, requestRobots} from '../actions';\r\n\r\n//Tells what state one needs to listen to and send down as props\r\nconst mapStateToProps = state => ({\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n})\r\n\r\n//Tells what props one needs to listen to that are actions that needs to get dispatched\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n})\r\n\r\n//Props are just input or properties, we never modify them and use pure components/functions like cCard or CardList\r\n//State - object that describes app, and here state is robots and whatever is entered in the search box => its able to change\r\n//Parent feeds state into child component\r\n//for using state we use class instead of functions, these are called smart components \r\nclass App extends Component {\r\n    /*constructor(){\r\n        super();\r\n        this.state = {  //adding state and what we need the state to describe\r\n            robots: [],\r\n        }\r\n    }*/\r\n    /*\r\n    onSearchChange = (event) => {   //Always use arrow functions while creating own methods, this makes sure that 'this' refers to App's object\r\n        this.setState({ searchfield: event.target.value });\r\n    }\r\n    */\r\n\r\n    render(){\r\n        //const {robots} = this.state;\r\n        const {robots, isPending, error, searchField,onSearchChange} = this.props;\r\n        const filteredRobobts = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        if(isPending){\r\n            return (\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f1\">Robo-Friends</h1>\r\n                    <Searchbox searchChange={onSearchChange}/>\r\n                    <h3>Loading...</h3>\r\n                </div>\r\n                \r\n            );\r\n        }\r\n        else if(error){\r\n            return (\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f1\">Robo-Friends</h1>\r\n                    <Searchbox searchChange={onSearchChange}/>\r\n                    <h3>Oops Error occurred !</h3>\r\n                </div>\r\n                \r\n            );\r\n        }\r\n        else{\r\n            return (\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f1\">Robo-Friends</h1>\r\n                    <Searchbox searchChange={onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobobts} />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n                \r\n            );\r\n        }\r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.onRequestRobots();\r\n    }\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\r\n","import {CHANGE_SEARCH_FIELD,REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_FAILED} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text   //payload is whatever data we will be sending to the reducer\r\n})\r\n\r\n//redux thunk listens to actions, if actions are returning functions then it provides dispatch so that it can run some actions\r\n//higher order function ie function returning function, redux thunk provides dispatch to the second layer function\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type:REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => dispatch({type:REQUEST_ROBOTS_SUCCESS, payload: users}))\r\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}));\r\n}","import {CHANGE_SEARCH_FIELD,REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_FAILED} from './constants';\r\n\r\nconst initialStateForSearchRobots = {\r\n    searchField:''\r\n}\r\n\r\n//Pure function - takes input and produces output that does not have any side effects ie it doesnt modify anything\r\nexport const searchRobots = (state=initialStateForSearchRobots,action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({},state,{searchField:action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateForRequestRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateForRequestRobots,action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({},state,{isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({},state,{isPending: false,robots: action.payload});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({},state,{isPending:false,error: action.payload});  \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware,combineReducers} from 'redux'; \nimport {createLogger} from 'redux-logger'; \nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';  //by default considers app.js if type not sprcified\nimport {searchRobots, requestRobots} from './reducers';\nimport reportWebVitals from './reportWebVitals';\n\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst logger = createLogger();\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger));  //store created that contains state of the app\n\nReactDOM.render(\n  //Provider component passes down the store to all the components down the component tree from the app\n  <Provider store={store}>  \n   <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}